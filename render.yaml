version: "1"
previewsEnabled: true
previewsExpireAfterDays: 3
databases:
- name: meep-database
  databaseName: meep_database
  user: meep_database_user
  previewPlan: starter
  region: frankfurt
  postgresMajorVersion: "16"
services:
- type: web
  name: meep-intelligence-hub-backend
  runtime: python
  repo: https://github.com/commonknowledge/mapped
  previewPlan: starter
  envVars:
  - key: ENVIRONMENT
    value: production
    previewValue: staging
  - key: SCHEDULED_UPDATE_SECONDS_DELAY
    value: 0
  - key: BASE_URL
    fromService:
      name: meep-intelligence-hub-backend
      type: web
      envVarKey: RENDER_EXTERNAL_URL
  - key: FRONTEND_URL
    fromService:
      name: meep-intelligence-hub-frontend
      type: web
      envVarKey: RENDER_EXTERNAL_URL
  - key: DATABASE_URL
    fromDatabase:
      name: meep-database
      property: connectionString
  - key: CORS_ALLOWED_ORIGINS
    fromService:
      name: meep-intelligence-hub-frontend
      type: web
      envVarKey: RENDER_EXTERNAL_URL
  - key: ALLOWED_HOSTS
    fromService:
      name: meep-intelligence-hub-backend
      type: web
      envVarKey: RENDER_EXTERNAL_HOSTNAME
  - key: CACHE_FILE
    value: /tmp/meep
  - fromGroup: MEEP production environment
  region: frankfurt
  buildCommand: poetry install
  startCommand: python manage.py collectstatic --noinput && python manage.py compress
    --force && gunicorn local_intelligence_hub.asgi:application -k uvicorn.workers.UvicornWorker
  preDeployCommand: python manage.py migrate
  healthCheckPath: /
  buildFilter:
    ignoredPaths:
    - nextjs/**
- type: worker
  name: meep-intelligence-hub-worker
  runtime: python
  repo: https://github.com/commonknowledge/mapped
  previewPlan: starter
  envVars:
  - key: ENVIRONMENT
    value: production
    previewValue: staging
  - key: DATABASE_URL
    fromDatabase:
      name: meep-database
      property: connectionString
  - key: SCHEDULED_UPDATE_SECONDS_DELAY
    value: 0
  - key: CACHE_FILE
    value: /tmp/meep
  - key: BASE_URL
    fromService:
      name: meep-intelligence-hub-backend
      type: web
      envVarKey: RENDER_EXTERNAL_URL
  - key: FRONTEND_URL
    fromService:
      name: meep-intelligence-hub-frontend
      type: web
      envVarKey: RENDER_EXTERNAL_URL
  - fromGroup: MEEP production environment
  region: frankfurt
  buildCommand: poetry install
  startCommand: python manage.py procrastinate worker
  preDeployCommand: python manage.py migrate
  buildFilter:
    ignoredPaths:
    - nextjs/**
- type: web
  name: meep-intelligence-hub-frontend
  runtime: node
  repo: https://github.com/commonknowledge/mapped
  previewPlan: starter
  envVars:
  - key: NEXT_PUBLIC_ENVIRONMENT
    value: production
    previewValue: staging
  - key: NEXT_PUBLIC_BACKEND_URL
    fromService:
      name: meep-intelligence-hub-backend
      type: web
      envVarKey: RENDER_EXTERNAL_URL
  - key: NEXT_PUBLIC_FRONTEND_URL
    fromService:
      name: meep-intelligence-hub-frontend
      type: web
      envVarKey: RENDER_EXTERNAL_URL
  - fromGroup: MEEP production environment
  region: frankfurt
  buildCommand: npm install && npm run build
  startCommand: npm run start
  buildFilter:
    paths:
    - nextjs/**
  rootDir: nextjs
# Reuse the production MinIO to save on services.
# Also because we can't hardcode credentials right now.
# - type: web
#   name: minio-server
#   runtime: image
#   image:
#     url: docker.io/minio/minio:latest
#   plan: starter
#   previewPlan: starter
#   envVars:
#   - key: CONSOLE_PORT
#     sync: false
#   - key: PORT
#     sync: false
#   - key: HOST
#     sync: false
#   - key: MINIO_ROOT_USER
#     sync: false
#   - key: MINIO_ROOT_PASSWORD
#     sync: false
#   - key: MINIO_BROWSER
#     sync: false
#   region: frankfurt
#   healthCheckPath: /minio/health/live
#   dockerCommand: minio server /data --address $HOST:$PORT --console-address $HOST:$CONSOLE_PORT
#   domains:
#   - uploads.commonknowledge.coop
#   disk:
#     name: data
#     mountPath: /data
#     sizeGB: 10
#   autoDeploy: false
# - type: web
#   name: minio-console
#   runtime: image
#   image:
#     url: docker.io/minio/console:v0.30.0
#   plan: starter
#   previewPlan: starter
#   envVars:
#   - key: MINIO_HOST
#     fromService:
#       name: minio-server
#       type: ""
#       property: host
#   - key: PORT
#     sync: false
#   - key: CONSOLE_PBKDF_SALT
#     sync: false
#   - key: CONSOLE_PBKDF_PASSPHRASE
#     sync: false
#   region: frankfurt
#   dockerCommand: /bin/bash -c CONSOLE_MINIO_SERVER=https://$MINIO_HOST.onrender.com
#     ./console server --port $PORT
#   autoDeploy: false