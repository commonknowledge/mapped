from django.contrib.gis.geos import GEOSGeometry, Point
from django.test import TestCase

from hub.models import Area, AreaType
from utils import google_maps, mapbox
from utils.google_maps import batch_geocode_address as batch_address_to_geojson_google
from utils.mapbox import batch_address_to_geojson as batch_address_to_geojson_mapbox
from utils.postcodesIO import get_bulk_postcode_geo, get_bulk_postcode_geo_from_coords


class TestGeocoding(TestCase):
    async def test_bulk_geocoding_postcodes(self):
        queries = ["G1 1AB", "G1 1AD"]

        results = await get_bulk_postcode_geo(queries)
        self.assertEqual(len(results), 2)
        self.assertEqual(results[0].postcode, "G1 1AB")

    async def test_output_area_included(self):
        # Create matching Output Areas in the database
        area_type, _ = await AreaType.objects.aget_or_create(
            name="Output Areas",
            code="OA21",
            area_type="Output Area",
            description="Census output areas",
        )
        await Area.objects.acreate(
            area_type=area_type,
            name="S00159099",
            gss="S00159099",
            polygon=GEOSGeometry(
                '{ "type": "MultiPolygon", "coordinates": [ [ [ [ -4.253049500947563, 55.863445609277754 ], [ -4.253073888539642, 55.86337347601706 ], [ -4.252557682955802, 55.863321213050845 ], [ -4.252607408403901, 55.863165896493605 ], [ -4.252677455396128, 55.862947104096591 ], [ -4.252027524324854, 55.862870106157629 ], [ -4.251990395632578, 55.862971737913668 ], [ -4.251966791271062, 55.863036339604818 ], [ -4.252007034217574, 55.863040788400056 ], [ -4.251914088018871, 55.863295078968058 ], [ -4.251877009799317, 55.863292297758761 ], [ -4.251861946191034, 55.86335784848103 ], [ -4.251507715944891, 55.863321949689485 ], [ -4.249380143371372, 55.863162656679393 ], [ -4.248325378579874, 55.863075008906776 ], [ -4.248232777248473, 55.863067313587045 ], [ -4.247541634471577, 55.862999051227348 ], [ -4.246819084137455, 55.862940355079935 ], [ -4.244983168436436, 55.862973881704328 ], [ -4.244882694861876, 55.862470979034931 ], [ -4.243801530379726, 55.862328937373412 ], [ -4.242906620631712, 55.862211359259668 ], [ -4.242798969248881, 55.862520374121814 ], [ -4.242870691128901, 55.86267612848642 ], [ -4.243101868852259, 55.862714269524297 ], [ -4.243058478986898, 55.862850895181275 ], [ -4.242989156455934, 55.863037226290984 ], [ -4.242863670597358, 55.863038411175282 ], [ -4.242783714768907, 55.863039166481002 ], [ -4.242787237628568, 55.863059744302731 ], [ -4.242385046841627, 55.863065769520759 ], [ -4.242383965892341, 55.863042941677747 ], [ -4.242113096965022, 55.863045498470811 ], [ -4.242098414471339, 55.862754346164493 ], [ -4.241822137636446, 55.86275434695591 ], [ -4.241442376632659, 55.861986948667088 ], [ -4.243308710282469, 55.86220456484741 ], [ -4.243271087141277, 55.862106390625478 ], [ -4.243235446696911, 55.861920737231124 ], [ -4.243111195419715, 55.861273486503542 ], [ -4.244131599114651, 55.861393051213064 ], [ -4.24414031249596, 55.861394144151134 ], [ -4.244170207227011, 55.86132213868833 ], [ -4.244274254594476, 55.861071531287259 ], [ -4.244295598894522, 55.861017525242914 ], [ -4.243820369268198, 55.860963697878233 ], [ -4.24379958439559, 55.861021734330933 ], [ -4.243061676586268, 55.860917386446147 ], [ -4.243077900507072, 55.861001405066311 ], [ -4.243080220021934, 55.861013419248152 ], [ -4.243079528457353, 55.861013342886942 ], [ -4.243094771971628, 55.861125145703014 ], [ -4.241045353555184, 55.860911547515698 ], [ -4.241010928214981, 55.86101005568193 ], [ -4.241008584025023, 55.861020017698905 ], [ -4.240988261758726, 55.861065045983032 ], [ -4.240536692646582, 55.861075985868425 ], [ -4.240376471589543, 55.8611205186414 ], [ -4.24023817301291, 55.861105203475361 ], [ -4.240218698154045, 55.861014937311204 ], [ -4.240221634552253, 55.861015089633014 ], [ -4.240129292051475, 55.860719588959846 ], [ -4.240053188421236, 55.860619225234494 ], [ -4.239885282188105, 55.860478486309326 ], [ -4.239813604949127, 55.860340434389656 ], [ -4.241486806964257, 55.860539180916923 ], [ -4.241991741379884, 55.860592780446957 ], [ -4.242037100749233, 55.860598589779237 ], [ -4.242082456559577, 55.860458371421565 ], [ -4.243084627279912, 55.86043059127428 ], [ -4.243669471305865, 55.860414376082907 ], [ -4.243628813648059, 55.86068547882526 ], [ -4.243778300634253, 55.860696509405287 ], [ -4.24420151714771, 55.860619164392048 ], [ -4.244210488230607, 55.860617524971197 ], [ -4.244223819134477, 55.860615088803648 ], [ -4.244626015573345, 55.860661672773958 ], [ -4.245156439632491, 55.860714901945009 ], [ -4.245235641080523, 55.860425861833072 ], [ -4.245637836683468, 55.860472442508531 ], [ -4.245720661705248, 55.860246247141077 ], [ -4.246052886839684, 55.860464863190721 ], [ -4.245964880908482, 55.860601289184892 ], [ -4.24710317086782, 55.860725401522252 ], [ -4.247123124502339, 55.860640749358403 ], [ -4.247173214240893, 55.860621314857028 ], [ -4.247443781588072, 55.860475402835014 ], [ -4.247904801772991, 55.860474095148348 ], [ -4.248353448705814, 55.860530225221005 ], [ -4.248913679470872, 55.860588699082086 ], [ -4.249004007553299, 55.860597944421748 ], [ -4.249005012277538, 55.860598047377309 ], [ -4.249134347513235, 55.86061128415767 ], [ -4.249179743880344, 55.860418278053295 ], [ -4.249504379385161, 55.860457342796551 ], [ -4.249679279918038, 55.860478388668369 ], [ -4.249850501954016, 55.860498992004253 ], [ -4.250069367444243, 55.860524394447246 ], [ -4.250173061941649, 55.860536435691216 ], [ -4.250361420104799, 55.86055830745309 ], [ -4.250395849341931, 55.860562305934891 ], [ -4.250336981812365, 55.860738087635902 ], [ -4.250595267912431, 55.860770865408078 ], [ -4.250648501072429, 55.860591627713077 ], [ -4.250734136697319, 55.860396833105803 ], [ -4.250523297907877, 55.860374130349982 ], [ -4.250666938992673, 55.859991666941646 ], [ -4.25101862712953, 55.860027172423045 ], [ -4.251228607231719, 55.860043678906855 ], [ -4.251539119185689, 55.860068087532241 ], [ -4.251612437344533, 55.860073850556532 ], [ -4.251816053028606, 55.860089855874342 ], [ -4.251771905256273, 55.860260857192237 ], [ -4.251768398143013, 55.860274450925367 ], [ -4.251767691867022, 55.86027718521904 ], [ -4.251750785854955, 55.860342696005581 ], [ -4.251656905278361, 55.860571380782517 ], [ -4.251624703434644, 55.860642871357292 ], [ -4.251601846499788, 55.860693591885358 ], [ -4.251596012024991, 55.860706541590844 ], [ -4.251591656223952, 55.860718450453611 ], [ -4.251552705713943, 55.860824928184918 ], [ -4.251527065562708, 55.860895018799255 ], [ -4.251383013616195, 55.86117883336275 ], [ -4.251322470137888, 55.861344095124082 ], [ -4.251206138890689, 55.861700765440382 ], [ -4.252170679760761, 55.861816459573909 ], [ -4.252209251217119, 55.861803099061596 ], [ -4.25239052591172, 55.861827451175159 ], [ -4.252421829157349, 55.861843126943633 ], [ -4.252436486169911, 55.861830473968254 ], [ -4.252812960644108, 55.861877331430371 ], [ -4.252887134148961, 55.861901721376299 ], [ -4.253187085297406, 55.861934647112768 ], [ -4.253386192863235, 55.861963083830744 ], [ -4.253556110264026, 55.861990257651883 ], [ -4.25350484740439, 55.862114476147447 ], [ -4.253477648353642, 55.862197253504185 ], [ -4.253441686443551, 55.862306704027716 ], [ -4.253410289015238, 55.862402257382655 ], [ -4.253573285118008, 55.862435166111247 ], [ -4.253774120635, 55.862457243492827 ], [ -4.253765915893951, 55.862484993931346 ], [ -4.254204284239906, 55.862541344974801 ], [ -4.254270184853797, 55.862551173489535 ], [ -4.254310884207255, 55.862443810797089 ], [ -4.254325713814534, 55.862402979154133 ], [ -4.254491090130435, 55.862426756856088 ], [ -4.254541910800527, 55.862271791386235 ], [ -4.254727558897974, 55.862294055749565 ], [ -4.254846222783367, 55.862338245797609 ], [ -4.25481199820156, 55.862435145562145 ], [ -4.254843259200158, 55.862441519618969 ], [ -4.254818476401893, 55.862508092882528 ], [ -4.254728706472674, 55.862749242952347 ], [ -4.254702010971391, 55.862745265666639 ], [ -4.254585215340186, 55.863081439791991 ], [ -4.254238738215546, 55.863043568826946 ], [ -4.254204071995463, 55.863143859311435 ], [ -4.253801768054005, 55.863100795615864 ], [ -4.253703175424551, 55.863361617089453 ], [ -4.253644525293111, 55.863516770537217 ], [ -4.253556791755626, 55.863507206920907 ], [ -4.25337104565916, 55.863485544676706 ], [ -4.253214176365717, 55.863464674246451 ], [ -4.253049500947563, 55.863445609277754 ] ] ] ] }'
            ),
        )
        await Area.objects.acreate(
            area_type=area_type,
            name="E00007211",
            gss="E00007211",
            polygon=GEOSGeometry(
                '{ "type": "MultiPolygon", "coordinates": [[[[-0.088319216,51.653494817],[-0.087060992,51.652757191],[-0.085904846,51.652290626],[-0.085863227,51.651775055],[-0.086823444,51.651592724],[-0.088561739,51.649997176],[-0.088872024,51.652287505],[-0.090023393,51.651721734],[-0.090739944,51.650839474],[-0.091507584,51.650993763],[-0.092091531,51.651627778],[-0.092622442,51.651545144],[-0.092097542,51.651868471],[-0.091736084,51.653613673],[-0.090585745,51.653603486],[-0.088319216,51.653494817]]]] }'
            ),
        )
        queries = ["G1 1AB", "EN2 6PJ", "N14 7LU"]
        results = await get_bulk_postcode_geo(queries)
        self.assertEqual(len(results), 3)
        self.assertEqual(results[0].codes.output_area, "S00159099")
        self.assertEqual(results[1].codes.output_area, "E00007211")
        self.assertIsNone(
            results[2].codes.output_area
        )  # assert None when no matching area exists

    async def test_get_bulk_postcode_geo_from_coords(self):
        queries = [
            Point(-0.127758, 51.507351),
            Point(-2.2426, 53.4808),
        ]
        results = await get_bulk_postcode_geo_from_coords(queries)
        self.assertEqual(len(results), 2)
        self.assertEqual(results[0].postcode, "WC2N 5DU")

    def test_bulk_geocoding_addresses_mapbox(self):
        queries = [
            mapbox.GeocodingQuery(query="Chiapas", country="MX"),
            mapbox.GeocodingQuery(query="Moravian Church, Priory Road, N8 7HD"),
            mapbox.GeocodingQuery(
                query="Pelican House, 144 Cambridge Heath Road, London"
            ),
        ]
        results = batch_address_to_geojson_mapbox(queries)
        self.assertEqual(len(results), 3)
        self.assertEqual(results[0].features[0].geometry.type, "Point")

    def test_bulk_geocoding_addresses_google(self):
        queries = [
            google_maps.GeocodingQuery(
                query="Pelican House, 144 Cambridge Heath Road, London"
            ),
            google_maps.GeocodingQuery(query="Chiapas", country="MX"),
            google_maps.GeocodingQuery(query="Moravian Church, Priory Road, N8 7HD"),
        ]
        results = batch_address_to_geojson_google(queries)
        self.assertEqual(len(results), 3)
        self.assertIsInstance(results[0].geometry.location.lat, float)
